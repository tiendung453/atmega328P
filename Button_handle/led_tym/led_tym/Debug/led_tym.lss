
led_tym.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002d6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bdd  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000763  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c1  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c9  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c4  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00002435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 39 01 	call	0x272	; 0x272 <main>
  8e:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <nhay_dong_thoi>:
		*PORTx &= ~(1 << PORTxn);
	}
}

void  nhay_dong_thoi(unsigned char arr1[], unsigned char arr2[])
{
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	dc 01       	movw	r26, r24
  a4:	ac 01       	movw	r20, r24
  a6:	48 5f       	subi	r20, 0xF8	; 248
  a8:	5f 4f       	sbci	r21, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24

void write_pin(volatile uint8_t *PORTx, char PORTxn, int val)
{
	if(val)
	{
		*PORTx |= (1 << PORTxn);
  ac:	c1 e0       	ldi	r28, 0x01	; 1
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	9e 01       	movw	r18, r28
  b4:	01 90       	ld	r0, Z+
  b6:	02 c0       	rjmp	.+4      	; 0xbc <nhay_dong_thoi+0x26>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <nhay_dong_thoi+0x22>
  c0:	28 2b       	or	r18, r24
  c2:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	2f e7       	ldi	r18, 0x7F	; 127
  c6:	85 eb       	ldi	r24, 0xB5	; 181
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <nhay_dong_thoi+0x34>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <nhay_dong_thoi+0x3e>
  d4:	00 00       	nop
	}
}

void  nhay_dong_thoi(unsigned char arr1[], unsigned char arr2[])
{
	for(int i =0; i < 8; i++)
  d6:	e4 17       	cp	r30, r20
  d8:	f5 07       	cpc	r31, r21
  da:	51 f7       	brne	.-44     	; 0xb0 <nhay_dong_thoi+0x1a>
  dc:	fb 01       	movw	r30, r22
  de:	7b 01       	movw	r14, r22
  e0:	c6 e0       	ldi	r28, 0x06	; 6
  e2:	ec 0e       	add	r14, r28
  e4:	f1 1c       	adc	r15, r1

void write_pin(volatile uint8_t *PORTx, char PORTxn, int val)
{
	if(val)
	{
		*PORTx |= (1 << PORTxn);
  e6:	01 e0       	ldi	r16, 0x01	; 1
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	25 b1       	in	r18, 0x05	; 5
  ec:	eb 01       	movw	r28, r22
  ee:	c8 01       	movw	r24, r16
  f0:	09 90       	ld	r0, Y+
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <nhay_dong_thoi+0x62>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <nhay_dong_thoi+0x5e>
  fc:	be 01       	movw	r22, r28
  fe:	82 2b       	or	r24, r18
 100:	85 b9       	out	0x05, r24	; 5
 102:	df e7       	ldi	r29, 0x7F	; 127
 104:	25 eb       	ldi	r18, 0xB5	; 181
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	d1 50       	subi	r29, 0x01	; 1
 10a:	20 40       	sbci	r18, 0x00	; 0
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <nhay_dong_thoi+0x72>
 110:	00 c0       	rjmp	.+0      	; 0x112 <nhay_dong_thoi+0x7c>
 112:	00 00       	nop
	for(int i =0; i < 8; i++)
	{
		write_pin(&PORTD,arr1[i],1);
		_delay_ms(35);
	}
	for(int i =0; i < 6; i++)
 114:	6e 15       	cp	r22, r14
 116:	7f 05       	cpc	r23, r15
 118:	41 f7       	brne	.-48     	; 0xea <nhay_dong_thoi+0x54>
	{
		*PORTx |= (1 << PORTxn);
	}
	else
	{
		*PORTx &= ~(1 << PORTxn);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	9b b1       	in	r25, 0x0b	; 11
 120:	9b 01       	movw	r18, r22
 122:	0d 90       	ld	r0, X+
 124:	02 c0       	rjmp	.+4      	; 0x12a <nhay_dong_thoi+0x94>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <nhay_dong_thoi+0x90>
 12e:	82 2f       	mov	r24, r18
 130:	80 95       	com	r24
 132:	89 23       	and	r24, r25
 134:	8b b9       	out	0x0b, r24	; 11
 136:	9f e7       	ldi	r25, 0x7F	; 127
 138:	c5 eb       	ldi	r28, 0xB5	; 181
 13a:	d1 e0       	ldi	r29, 0x01	; 1
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	c0 40       	sbci	r28, 0x00	; 0
 140:	d0 40       	sbci	r29, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <nhay_dong_thoi+0xa6>
 144:	00 c0       	rjmp	.+0      	; 0x146 <nhay_dong_thoi+0xb0>
 146:	00 00       	nop
	for(int i =0; i < 6; i++)
	{
		write_pin(&PORTB,arr2[i],1);
		_delay_ms(35);
	}
	for(int i =0; i < 8; i++)
 148:	4a 17       	cp	r20, r26
 14a:	5b 07       	cpc	r21, r27
 14c:	41 f7       	brne	.-48     	; 0x11e <nhay_dong_thoi+0x88>
	{
		*PORTx |= (1 << PORTxn);
	}
	else
	{
		*PORTx &= ~(1 << PORTxn);
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	95 b1       	in	r25, 0x05	; 5
 154:	9a 01       	movw	r18, r20
 156:	01 90       	ld	r0, Z+
 158:	02 c0       	rjmp	.+4      	; 0x15e <nhay_dong_thoi+0xc8>
 15a:	22 0f       	add	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <nhay_dong_thoi+0xc4>
 162:	82 2f       	mov	r24, r18
 164:	80 95       	com	r24
 166:	89 23       	and	r24, r25
 168:	85 b9       	out	0x05, r24	; 5
 16a:	2f e7       	ldi	r18, 0x7F	; 127
 16c:	85 eb       	ldi	r24, 0xB5	; 181
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <nhay_dong_thoi+0xda>
 178:	00 c0       	rjmp	.+0      	; 0x17a <nhay_dong_thoi+0xe4>
 17a:	00 00       	nop
	for(int i =0; i < 8; i++)
	{
		write_pin(&PORTD,arr1[i],0);
		_delay_ms(35);
	}
	for(int i =0; i < 6; i++)
 17c:	ee 15       	cp	r30, r14
 17e:	ff 05       	cpc	r31, r15
 180:	41 f7       	brne	.-48     	; 0x152 <nhay_dong_thoi+0xbc>
	{
		write_pin(&PORTB,arr2[i],0);
		_delay_ms(35);
	}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	08 95       	ret

00000190 <con_tro_chay>:

void  con_tro_chay(unsigned char arr1[], unsigned char arr2[])
{
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	7c 01       	movw	r14, r24
 19e:	dc 01       	movw	r26, r24
 1a0:	8c 01       	movw	r16, r24
 1a2:	08 5f       	subi	r16, 0xF8	; 248
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	fc 01       	movw	r30, r24

void write_pin(volatile uint8_t *PORTx, char PORTxn, int val)
{
	if(val)
	{
		*PORTx |= (1 << PORTxn);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	ef 01       	movw	r28, r30
 1ae:	4b b1       	in	r20, 0x0b	; 11
 1b0:	9b 01       	movw	r18, r22
 1b2:	01 90       	ld	r0, Z+
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <con_tro_chay+0x2a>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <con_tro_chay+0x26>
 1be:	24 2b       	or	r18, r20
 1c0:	2b b9       	out	0x0b, r18	; 11
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	89 ef       	ldi	r24, 0xF9	; 249
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <con_tro_chay+0x38>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <con_tro_chay+0x42>
 1d2:	00 00       	nop
	}
	else
	{
		*PORTx &= ~(1 << PORTxn);
 1d4:	2b b1       	in	r18, 0x0b	; 11
 1d6:	ab 01       	movw	r20, r22
 1d8:	08 80       	ld	r0, Y
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <con_tro_chay+0x50>
 1dc:	44 0f       	add	r20, r20
 1de:	55 1f       	adc	r21, r21
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <con_tro_chay+0x4c>
 1e4:	94 2f       	mov	r25, r20
 1e6:	90 95       	com	r25
 1e8:	92 23       	and	r25, r18
 1ea:	9b b9       	out	0x0b, r25	; 11
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	89 ef       	ldi	r24, 0xF9	; 249
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <con_tro_chay+0x62>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <con_tro_chay+0x6c>
 1fc:	00 00       	nop
	}
}

void  con_tro_chay(unsigned char arr1[], unsigned char arr2[])
{
	for(int i =0; i < 8; i++)
 1fe:	e0 17       	cp	r30, r16
 200:	f1 07       	cpc	r31, r17
 202:	a1 f6       	brne	.-88     	; 0x1ac <con_tro_chay+0x1c>
 204:	e7 01       	movw	r28, r14
 206:	26 96       	adiw	r28, 0x06	; 6

void write_pin(volatile uint8_t *PORTx, char PORTxn, int val)
{
	if(val)
	{
		*PORTx |= (1 << PORTxn);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	fd 01       	movw	r30, r26
 20e:	95 b1       	in	r25, 0x05	; 5
 210:	9b 01       	movw	r18, r22
 212:	0d 90       	ld	r0, X+
 214:	02 c0       	rjmp	.+4      	; 0x21a <con_tro_chay+0x8a>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <con_tro_chay+0x86>
 21e:	29 2b       	or	r18, r25
 220:	25 b9       	out	0x05, r18	; 5
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	89 ef       	ldi	r24, 0xF9	; 249
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <con_tro_chay+0x98>
 230:	00 c0       	rjmp	.+0      	; 0x232 <con_tro_chay+0xa2>
 232:	00 00       	nop
	}
	else
	{
		*PORTx &= ~(1 << PORTxn);
 234:	25 b1       	in	r18, 0x05	; 5
 236:	ab 01       	movw	r20, r22
 238:	00 80       	ld	r0, Z
 23a:	02 c0       	rjmp	.+4      	; 0x240 <con_tro_chay+0xb0>
 23c:	44 0f       	add	r20, r20
 23e:	55 1f       	adc	r21, r21
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <con_tro_chay+0xac>
 244:	94 2f       	mov	r25, r20
 246:	90 95       	com	r25
 248:	92 23       	and	r25, r18
 24a:	95 b9       	out	0x05, r25	; 5
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	89 ef       	ldi	r24, 0xF9	; 249
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <con_tro_chay+0xc2>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <con_tro_chay+0xcc>
 25c:	00 00       	nop
		write_pin(&PORTD,arr1[i],1);
		_delay_ms(20);
		write_pin(&PORTD,arr1[i],0);
		_delay_ms(20);
	}
	for(int i =0; i < 6; i++)
 25e:	ac 17       	cp	r26, r28
 260:	bd 07       	cpc	r27, r29
 262:	a1 f6       	brne	.-88     	; 0x20c <con_tro_chay+0x7c>
		write_pin(&PORTB,arr1[i],1);
		_delay_ms(20);
		write_pin(&PORTB,arr1[i],0);
		_delay_ms(20);
	}
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	08 95       	ret

00000272 <main>:

int main(void)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	2e 97       	sbiw	r28, 0x0e	; 14
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD |= 0xFF;
 286:	8a b1       	in	r24, 0x0a	; 10
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0xFF;
 28c:	94 b1       	in	r25, 0x04	; 4
 28e:	84 b9       	out	0x04, r24	; 4
	unsigned char led1[] = {PORTD0, PORTD1, PORTD2, PORTD3, PORTD4, PORTD5, PORTD6, PORTD7};
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	e0 e0       	ldi	r30, 0x00	; 0
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	de 01       	movw	r26, r28
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	01 90       	ld	r0, Z+
 29c:	0d 92       	st	X+, r0
 29e:	8a 95       	dec	r24
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x28>
	unsigned char led2[] = {PORTB0, PORTB1, PORTB2, PORTB3, PORTB4, PORTB5};	
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	e8 e0       	ldi	r30, 0x08	; 8
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	de 01       	movw	r26, r28
 2aa:	19 96       	adiw	r26, 0x09	; 9
 2ac:	01 90       	ld	r0, Z+
 2ae:	0d 92       	st	X+, r0
 2b0:	8a 95       	dec	r24
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x3a>
    while (1) 
    {
		nhay_dong_thoi(led1,led2);
 2b4:	be 01       	movw	r22, r28
 2b6:	67 5f       	subi	r22, 0xF7	; 247
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 4b 00 	call	0x96	; 0x96 <nhay_dong_thoi>
		con_tro_chay(led1,led2);
 2c2:	be 01       	movw	r22, r28
 2c4:	67 5f       	subi	r22, 0xF7	; 247
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	0e 94 c8 00 	call	0x190	; 0x190 <con_tro_chay>
    }
 2d0:	f1 cf       	rjmp	.-30     	; 0x2b4 <main+0x42>

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
