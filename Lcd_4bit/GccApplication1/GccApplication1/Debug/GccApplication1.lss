
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000524  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000524  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f0  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b0  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048f  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030b  00000000  00000000  000021c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "step.h"
int main(void)
{
	DDRD = 0x0F;
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00; 
  9a:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	88 b9       	out	0x08, r24	; 8
	uint8_t running = 0;
	uint8_t direction = 0;
	while (PINC == 0xFF);
  a0:	86 b1       	in	r24, 0x06	; 6
  a2:	8f 3f       	cpi	r24, 0xFF	; 255
  a4:	e9 f3       	breq	.-6      	; 0xa0 <main+0xa>
  a6:	10 e0       	ldi	r17, 0x00	; 0
  a8:	c0 e0       	ldi	r28, 0x00	; 0

	        case 0xFD:
				key_delay();
				counter_clock_wise();
				running = 1;
				direction = 0;
  aa:	00 e0       	ldi	r16, 0x00	; 0
				break;

	        case 0xFD:
				key_delay();
				counter_clock_wise();
				running = 1;
  ac:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t running = 0;
	uint8_t direction = 0;
	while (PINC == 0xFF);
    while (1)
    {
        switch (PINC) 
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	8b 3f       	cpi	r24, 0xFB	; 251
  b2:	c1 f0       	breq	.+48     	; 0xe4 <main+0x4e>
  b4:	28 f4       	brcc	.+10     	; 0xc0 <main+0x2a>
  b6:	8f 3e       	cpi	r24, 0xEF	; 239
  b8:	49 f1       	breq	.+82     	; 0x10c <main+0x76>
  ba:	87 3f       	cpi	r24, 0xF7	; 247
  bc:	c9 f0       	breq	.+50     	; 0xf0 <main+0x5a>
  be:	f7 cf       	rjmp	.-18     	; 0xae <main+0x18>
  c0:	8d 3f       	cpi	r24, 0xFD	; 253
  c2:	49 f0       	breq	.+18     	; 0xd6 <main+0x40>
  c4:	8e 3f       	cpi	r24, 0xFE	; 254
  c6:	99 f7       	brne	.-26     	; 0xae <main+0x18>
		{
	        case 0xFE:
				key_delay();
  c8:	0e 94 98 01 	call	0x330	; 0x330 <key_delay>
				clock_wise();
  cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <clock_wise>
				running = 1;
				direction = 1;
  d0:	1d 2f       	mov	r17, r29
        switch (PINC) 
		{
	        case 0xFE:
				key_delay();
				clock_wise();
				running = 1;
  d2:	cd 2f       	mov	r28, r29
				direction = 1;
				break;
  d4:	ec cf       	rjmp	.-40     	; 0xae <main+0x18>

	        case 0xFD:
				key_delay();
  d6:	0e 94 98 01 	call	0x330	; 0x330 <key_delay>
				counter_clock_wise();
  da:	0e 94 0f 01 	call	0x21e	; 0x21e <counter_clock_wise>
				running = 1;
				direction = 0;
  de:	10 2f       	mov	r17, r16
				break;

	        case 0xFD:
				key_delay();
				counter_clock_wise();
				running = 1;
  e0:	cd 2f       	mov	r28, r29
				direction = 0;
				break;
  e2:	e5 cf       	rjmp	.-54     	; 0xae <main+0x18>

	        case 0xFB:
				key_delay();
  e4:	0e 94 98 01 	call	0x330	; 0x330 <key_delay>
				stop_motor();
  e8:	0e 94 96 01 	call	0x32c	; 0x32c <stop_motor>
				running = 0;
  ec:	c0 2f       	mov	r28, r16
				break;
  ee:	df cf       	rjmp	.-66     	; 0xae <main+0x18>

	        case 0xF7:
				key_delay();
  f0:	0e 94 98 01 	call	0x330	; 0x330 <key_delay>
				increase_speed();
  f4:	0e 94 40 01 	call	0x280	; 0x280 <increase_speed>
				if(running)
  f8:	cc 23       	and	r28, r28
  fa:	c9 f2       	breq	.-78     	; 0xae <main+0x18>
				{
					if(direction) clock_wise();
  fc:	11 23       	and	r17, r17
  fe:	19 f0       	breq	.+6      	; 0x106 <main+0x70>
 100:	0e 94 de 00 	call	0x1bc	; 0x1bc <clock_wise>
 104:	d4 cf       	rjmp	.-88     	; 0xae <main+0x18>
					else counter_clock_wise();
 106:	0e 94 0f 01 	call	0x21e	; 0x21e <counter_clock_wise>
 10a:	d1 cf       	rjmp	.-94     	; 0xae <main+0x18>
				}
				break;

	        case 0xEF:
				key_delay();
 10c:	0e 94 98 01 	call	0x330	; 0x330 <key_delay>
				decrease_speed();
 110:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <decrease_speed>
				if(running)
 114:	cc 23       	and	r28, r28
 116:	59 f2       	breq	.-106    	; 0xae <main+0x18>
				{
					if(direction) clock_wise();
 118:	11 23       	and	r17, r17
 11a:	19 f0       	breq	.+6      	; 0x122 <main+0x8c>
 11c:	0e 94 de 00 	call	0x1bc	; 0x1bc <clock_wise>
 120:	c6 cf       	rjmp	.-116    	; 0xae <main+0x18>
					else counter_clock_wise();
 122:	0e 94 0f 01 	call	0x21e	; 0x21e <counter_clock_wise>
 126:	c3 cf       	rjmp	.-122    	; 0xae <main+0x18>

00000128 <delay_ms>:
static double step = 2;

static double debounce = 3;

void delay_ms(double d)
{
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	6b 01       	movw	r12, r22
 13a:	7c 01       	movw	r14, r24
	while (d--) {
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	0e 94 a4 01 	call	0x348	; 0x348 <__subsf3>
 148:	06 2f       	mov	r16, r22
 14a:	17 2f       	mov	r17, r23
 14c:	d8 2f       	mov	r29, r24
 14e:	c9 2f       	mov	r28, r25
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	a9 01       	movw	r20, r18
 156:	c7 01       	movw	r24, r14
 158:	b6 01       	movw	r22, r12
 15a:	0e 94 11 02 	call	0x422	; 0x422 <__cmpsf2>
 15e:	81 11       	cpse	r24, r1
 160:	05 c0       	rjmp	.+10     	; 0x16c <delay_ms+0x44>
 162:	23 c0       	rjmp	.+70     	; 0x1aa <delay_ms+0x82>
 164:	0c 2d       	mov	r16, r12
 166:	1d 2d       	mov	r17, r13
 168:	de 2d       	mov	r29, r14
 16a:	cf 2d       	mov	r28, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	8f e9       	ldi	r24, 0x9F	; 159
 16e:	9f e0       	ldi	r25, 0x0F	; 15
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <delay_ms+0x48>
 174:	00 c0       	rjmp	.+0      	; 0x176 <delay_ms+0x4e>
 176:	00 00       	nop
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e8       	ldi	r20, 0x80	; 128
 17e:	5f e3       	ldi	r21, 0x3F	; 63
 180:	60 2f       	mov	r22, r16
 182:	71 2f       	mov	r23, r17
 184:	8d 2f       	mov	r24, r29
 186:	9c 2f       	mov	r25, r28
 188:	0e 94 a4 01 	call	0x348	; 0x348 <__subsf3>
 18c:	c6 2e       	mov	r12, r22
 18e:	d7 2e       	mov	r13, r23
 190:	e8 2e       	mov	r14, r24
 192:	f9 2e       	mov	r15, r25
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	a9 01       	movw	r20, r18
 19a:	60 2f       	mov	r22, r16
 19c:	71 2f       	mov	r23, r17
 19e:	8d 2f       	mov	r24, r29
 1a0:	9c 2f       	mov	r25, r28
 1a2:	0e 94 11 02 	call	0x422	; 0x422 <__cmpsf2>
 1a6:	81 11       	cpse	r24, r1
 1a8:	dd cf       	rjmp	.-70     	; 0x164 <delay_ms+0x3c>
		_delay_ms(1);
	}
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <clock_wise>:

void clock_wise()
{
	PORTD = 0x01;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8b b9       	out	0x0b, r24	; 11
	delay_ms(time_delay);
 1c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 1cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 1d0:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
	PORTD = 0x02; 
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	8b b9       	out	0x0b, r24	; 11
	delay_ms(time_delay);
 1d8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1dc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 1e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 1e8:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
	PORTD = 0x04;
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	8b b9       	out	0x0b, r24	; 11
	delay_ms(time_delay);
 1f0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1f4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 1fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 200:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
	PORTD = 0x08;
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	8b b9       	out	0x0b, r24	; 11
    delay_ms(time_delay);
 208:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 20c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 210:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 214:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 218:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
 21c:	08 95       	ret

0000021e <counter_clock_wise>:
}

void counter_clock_wise()
{
    PORTD = 0x08;
 21e:	88 e0       	ldi	r24, 0x08	; 8
 220:	8b b9       	out	0x0b, r24	; 11
    delay_ms(time_delay);
 222:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 226:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 22a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 22e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 232:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
    PORTD = 0x04;
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	8b b9       	out	0x0b, r24	; 11
    delay_ms(time_delay);
 23a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 23e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 242:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 246:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 24a:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
    PORTD = 0x02;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	8b b9       	out	0x0b, r24	; 11
    delay_ms(time_delay);
 252:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 256:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 25a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 25e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 262:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
    PORTD = 0x01;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	8b b9       	out	0x0b, r24	; 11
    delay_ms(time_delay);
 26a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 26e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 272:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 276:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 27a:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
 27e:	08 95       	ret

00000280 <increase_speed>:
}

void increase_speed()
{
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
	if(time_delay > min_delay)
 288:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 28c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 290:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 294:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	50 e4       	ldi	r21, 0x40	; 64
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	0e 94 8b 02 	call	0x516	; 0x516 <__gesf2>
 2a8:	18 16       	cp	r1, r24
 2aa:	84 f4       	brge	.+32     	; 0x2cc <increase_speed+0x4c>
	{
		time_delay -= step;
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e4       	ldi	r21, 0x40	; 64
 2b4:	c7 01       	movw	r24, r14
 2b6:	b6 01       	movw	r22, r12
 2b8:	0e 94 a4 01 	call	0x348	; 0x348 <__subsf3>
 2bc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 2c0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 2c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 2c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	else if(time_delay == min_delay)
	{
		time_delay = min_delay;
	}
}
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

000002d6 <decrease_speed>:

void decrease_speed()
{
 2d6:	cf 92       	push	r12
 2d8:	df 92       	push	r13
 2da:	ef 92       	push	r14
 2dc:	ff 92       	push	r15
	if(time_delay < max_delay)
 2de:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 2e2:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 2e6:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 2ea:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	48 ec       	ldi	r20, 0xC8	; 200
 2f4:	52 e4       	ldi	r21, 0x42	; 66
 2f6:	c7 01       	movw	r24, r14
 2f8:	b6 01       	movw	r22, r12
 2fa:	0e 94 11 02 	call	0x422	; 0x422 <__cmpsf2>
 2fe:	88 23       	and	r24, r24
 300:	84 f4       	brge	.+32     	; 0x322 <decrease_speed+0x4c>
	{
		time_delay += step;
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e4       	ldi	r21, 0x40	; 64
 30a:	c7 01       	movw	r24, r14
 30c:	b6 01       	movw	r22, r12
 30e:	0e 94 a5 01 	call	0x34a	; 0x34a <__addsf3>
 312:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 316:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 31a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 31e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	}
	else if(time_delay == max_delay)
	{
		time_delay = max_delay;
	}
}
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	08 95       	ret

0000032c <stop_motor>:

void stop_motor()
{
	PORTD = 0x00;
 32c:	1b b8       	out	0x0b, r1	; 11
 32e:	08 95       	ret

00000330 <key_delay>:
}

void key_delay() 
{
 330:	cf 93       	push	r28
 332:	c7 e0       	ldi	r28, 0x07	; 7
	for (uint8_t i = 0; i < 7; i++)
	{
		delay_ms(debounce);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	80 e4       	ldi	r24, 0x40	; 64
 33a:	90 e4       	ldi	r25, 0x40	; 64
 33c:	0e 94 94 00 	call	0x128	; 0x128 <delay_ms>
 340:	c1 50       	subi	r28, 0x01	; 1
	PORTD = 0x00;
}

void key_delay() 
{
	for (uint8_t i = 0; i < 7; i++)
 342:	c1 f7       	brne	.-16     	; 0x334 <key_delay+0x4>
	{
		delay_ms(debounce);
	}
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <__subsf3>:
 348:	50 58       	subi	r21, 0x80	; 128

0000034a <__addsf3>:
 34a:	bb 27       	eor	r27, r27
 34c:	aa 27       	eor	r26, r26
 34e:	0e 94 bc 01 	call	0x378	; 0x378 <__addsf3x>
 352:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_round>
 356:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscA>
 35a:	38 f0       	brcs	.+14     	; 0x36a <__addsf3+0x20>
 35c:	0e 94 4a 02 	call	0x494	; 0x494 <__fp_pscB>
 360:	20 f0       	brcs	.+8      	; 0x36a <__addsf3+0x20>
 362:	39 f4       	brne	.+14     	; 0x372 <__addsf3+0x28>
 364:	9f 3f       	cpi	r25, 0xFF	; 255
 366:	19 f4       	brne	.+6      	; 0x36e <__addsf3+0x24>
 368:	26 f4       	brtc	.+8      	; 0x372 <__addsf3+0x28>
 36a:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_nan>
 36e:	0e f4       	brtc	.+2      	; 0x372 <__addsf3+0x28>
 370:	e0 95       	com	r30
 372:	e7 fb       	bst	r30, 7
 374:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>

00000378 <__addsf3x>:
 378:	e9 2f       	mov	r30, r25
 37a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_split3>
 37e:	58 f3       	brcs	.-42     	; 0x356 <__addsf3+0xc>
 380:	ba 17       	cp	r27, r26
 382:	62 07       	cpc	r22, r18
 384:	73 07       	cpc	r23, r19
 386:	84 07       	cpc	r24, r20
 388:	95 07       	cpc	r25, r21
 38a:	20 f0       	brcs	.+8      	; 0x394 <__addsf3x+0x1c>
 38c:	79 f4       	brne	.+30     	; 0x3ac <__addsf3x+0x34>
 38e:	a6 f5       	brtc	.+104    	; 0x3f8 <__addsf3x+0x80>
 390:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_zero>
 394:	0e f4       	brtc	.+2      	; 0x398 <__addsf3x+0x20>
 396:	e0 95       	com	r30
 398:	0b 2e       	mov	r0, r27
 39a:	ba 2f       	mov	r27, r26
 39c:	a0 2d       	mov	r26, r0
 39e:	0b 01       	movw	r0, r22
 3a0:	b9 01       	movw	r22, r18
 3a2:	90 01       	movw	r18, r0
 3a4:	0c 01       	movw	r0, r24
 3a6:	ca 01       	movw	r24, r20
 3a8:	a0 01       	movw	r20, r0
 3aa:	11 24       	eor	r1, r1
 3ac:	ff 27       	eor	r31, r31
 3ae:	59 1b       	sub	r21, r25
 3b0:	99 f0       	breq	.+38     	; 0x3d8 <__addsf3x+0x60>
 3b2:	59 3f       	cpi	r21, 0xF9	; 249
 3b4:	50 f4       	brcc	.+20     	; 0x3ca <__addsf3x+0x52>
 3b6:	50 3e       	cpi	r21, 0xE0	; 224
 3b8:	68 f1       	brcs	.+90     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3ba:	1a 16       	cp	r1, r26
 3bc:	f0 40       	sbci	r31, 0x00	; 0
 3be:	a2 2f       	mov	r26, r18
 3c0:	23 2f       	mov	r18, r19
 3c2:	34 2f       	mov	r19, r20
 3c4:	44 27       	eor	r20, r20
 3c6:	58 5f       	subi	r21, 0xF8	; 248
 3c8:	f3 cf       	rjmp	.-26     	; 0x3b0 <__addsf3x+0x38>
 3ca:	46 95       	lsr	r20
 3cc:	37 95       	ror	r19
 3ce:	27 95       	ror	r18
 3d0:	a7 95       	ror	r26
 3d2:	f0 40       	sbci	r31, 0x00	; 0
 3d4:	53 95       	inc	r21
 3d6:	c9 f7       	brne	.-14     	; 0x3ca <__addsf3x+0x52>
 3d8:	7e f4       	brtc	.+30     	; 0x3f8 <__addsf3x+0x80>
 3da:	1f 16       	cp	r1, r31
 3dc:	ba 0b       	sbc	r27, r26
 3de:	62 0b       	sbc	r22, r18
 3e0:	73 0b       	sbc	r23, r19
 3e2:	84 0b       	sbc	r24, r20
 3e4:	ba f0       	brmi	.+46     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e6:	91 50       	subi	r25, 0x01	; 1
 3e8:	a1 f0       	breq	.+40     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ea:	ff 0f       	add	r31, r31
 3ec:	bb 1f       	adc	r27, r27
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	c2 f7       	brpl	.-16     	; 0x3e6 <__addsf3x+0x6e>
 3f6:	0e c0       	rjmp	.+28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3f8:	ba 0f       	add	r27, r26
 3fa:	62 1f       	adc	r22, r18
 3fc:	73 1f       	adc	r23, r19
 3fe:	84 1f       	adc	r24, r20
 400:	48 f4       	brcc	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 402:	87 95       	ror	r24
 404:	77 95       	ror	r23
 406:	67 95       	ror	r22
 408:	b7 95       	ror	r27
 40a:	f7 95       	ror	r31
 40c:	9e 3f       	cpi	r25, 0xFE	; 254
 40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	b0 cf       	rjmp	.-160    	; 0x372 <__addsf3+0x28>
 412:	93 95       	inc	r25
 414:	88 0f       	add	r24, r24
 416:	08 f0       	brcs	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	99 27       	eor	r25, r25
 41a:	ee 0f       	add	r30, r30
 41c:	97 95       	ror	r25
 41e:	87 95       	ror	r24
 420:	08 95       	ret

00000422 <__cmpsf2>:
 422:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_cmp>
 426:	08 f4       	brcc	.+2      	; 0x42a <__cmpsf2+0x8>
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	08 95       	ret

0000042c <__fp_cmp>:
 42c:	99 0f       	add	r25, r25
 42e:	00 08       	sbc	r0, r0
 430:	55 0f       	add	r21, r21
 432:	aa 0b       	sbc	r26, r26
 434:	e0 e8       	ldi	r30, 0x80	; 128
 436:	fe ef       	ldi	r31, 0xFE	; 254
 438:	16 16       	cp	r1, r22
 43a:	17 06       	cpc	r1, r23
 43c:	e8 07       	cpc	r30, r24
 43e:	f9 07       	cpc	r31, r25
 440:	c0 f0       	brcs	.+48     	; 0x472 <__fp_cmp+0x46>
 442:	12 16       	cp	r1, r18
 444:	13 06       	cpc	r1, r19
 446:	e4 07       	cpc	r30, r20
 448:	f5 07       	cpc	r31, r21
 44a:	98 f0       	brcs	.+38     	; 0x472 <__fp_cmp+0x46>
 44c:	62 1b       	sub	r22, r18
 44e:	73 0b       	sbc	r23, r19
 450:	84 0b       	sbc	r24, r20
 452:	95 0b       	sbc	r25, r21
 454:	39 f4       	brne	.+14     	; 0x464 <__fp_cmp+0x38>
 456:	0a 26       	eor	r0, r26
 458:	61 f0       	breq	.+24     	; 0x472 <__fp_cmp+0x46>
 45a:	23 2b       	or	r18, r19
 45c:	24 2b       	or	r18, r20
 45e:	25 2b       	or	r18, r21
 460:	21 f4       	brne	.+8      	; 0x46a <__fp_cmp+0x3e>
 462:	08 95       	ret
 464:	0a 26       	eor	r0, r26
 466:	09 f4       	brne	.+2      	; 0x46a <__fp_cmp+0x3e>
 468:	a1 40       	sbci	r26, 0x01	; 1
 46a:	a6 95       	lsr	r26
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	81 1d       	adc	r24, r1
 470:	81 1d       	adc	r24, r1
 472:	08 95       	ret

00000474 <__fp_inf>:
 474:	97 f9       	bld	r25, 7
 476:	9f 67       	ori	r25, 0x7F	; 127
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	08 95       	ret

00000480 <__fp_nan>:
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	80 ec       	ldi	r24, 0xC0	; 192
 484:	08 95       	ret

00000486 <__fp_pscA>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	09 06       	cpc	r0, r25
 492:	08 95       	ret

00000494 <__fp_pscB>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	05 06       	cpc	r0, r21
 4a0:	08 95       	ret

000004a2 <__fp_round>:
 4a2:	09 2e       	mov	r0, r25
 4a4:	03 94       	inc	r0
 4a6:	00 0c       	add	r0, r0
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0xc>
 4aa:	88 23       	and	r24, r24
 4ac:	52 f0       	brmi	.+20     	; 0x4c2 <__fp_round+0x20>
 4ae:	bb 0f       	add	r27, r27
 4b0:	40 f4       	brcc	.+16     	; 0x4c2 <__fp_round+0x20>
 4b2:	bf 2b       	or	r27, r31
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0x18>
 4b6:	60 ff       	sbrs	r22, 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__fp_round+0x20>
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__fp_split3>:
 4c4:	57 fd       	sbrc	r21, 7
 4c6:	90 58       	subi	r25, 0x80	; 128
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	59 f0       	breq	.+22     	; 0x4e4 <__fp_splitA+0x10>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__fp_splitA+0x1a>
 4d2:	47 95       	ror	r20

000004d4 <__fp_splitA>:
 4d4:	88 0f       	add	r24, r24
 4d6:	97 fb       	bst	r25, 7
 4d8:	99 1f       	adc	r25, r25
 4da:	61 f0       	breq	.+24     	; 0x4f4 <__fp_splitA+0x20>
 4dc:	9f 3f       	cpi	r25, 0xFF	; 255
 4de:	79 f0       	breq	.+30     	; 0x4fe <__fp_splitA+0x2a>
 4e0:	87 95       	ror	r24
 4e2:	08 95       	ret
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	f2 cf       	rjmp	.-28     	; 0x4d2 <__fp_split3+0xe>
 4ee:	46 95       	lsr	r20
 4f0:	f1 df       	rcall	.-30     	; 0x4d4 <__fp_splitA>
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <__fp_splitA+0x30>
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <__fp_splitA+0xc>
 4fe:	86 95       	lsr	r24
 500:	71 05       	cpc	r23, r1
 502:	61 05       	cpc	r22, r1
 504:	08 94       	sec
 506:	08 95       	ret

00000508 <__fp_zero>:
 508:	e8 94       	clt

0000050a <__fp_szero>:
 50a:	bb 27       	eor	r27, r27
 50c:	66 27       	eor	r22, r22
 50e:	77 27       	eor	r23, r23
 510:	cb 01       	movw	r24, r22
 512:	97 f9       	bld	r25, 7
 514:	08 95       	ret

00000516 <__gesf2>:
 516:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_cmp>
 51a:	08 f4       	brcc	.+2      	; 0x51e <__gesf2+0x8>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	08 95       	ret

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
