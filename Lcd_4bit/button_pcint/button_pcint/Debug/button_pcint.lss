
button_pcint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b1  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000630  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  00000ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002f  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_4>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <pcint_init>:

#include <avr/io.h>
#include <avr/interrupt.h>
void pcint_init(void)
{
	DDRC &= ~((1 << PINC0) | (1 << PINC1) | (1 << PINC2) | (1 << PINC3));
  80:	87 b1       	in	r24, 0x07	; 7
  82:	80 7f       	andi	r24, 0xF0	; 240
  84:	87 b9       	out	0x07, r24	; 7
	PCICR |= (1 << PCIE1);
  86:	e8 e6       	ldi	r30, 0x68	; 104
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11);
  90:	ec e6       	ldi	r30, 0x6C	; 108
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8f 60       	ori	r24, 0x0F	; 15
  98:	80 83       	st	Z, r24
	sei();
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <__vector_4>:
}

ISR(PCINT1_vect)
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
	if (!(PINC & (1 << PINC0)))
  a8:	30 99       	sbic	0x06, 0	; 6
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__vector_4+0x12>
	{
		PORTD |= (1 << PORTD0);
  ac:	58 9a       	sbi	0x0b, 0	; 11
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <__vector_4+0x14>
	}
	else PORTD &= ~(1 << PORTD0);
  b0:	58 98       	cbi	0x0b, 0	; 11
	
	if (!(PINC & (1 << PINC1)))
  b2:	31 99       	sbic	0x06, 1	; 6
  b4:	02 c0       	rjmp	.+4      	; 0xba <__vector_4+0x1c>
	{
		PORTD |= (1 << PORTD1);
  b6:	59 9a       	sbi	0x0b, 1	; 11
  b8:	01 c0       	rjmp	.+2      	; 0xbc <__vector_4+0x1e>
	}
	else PORTD &= ~(1 << PORTD1);
  ba:	59 98       	cbi	0x0b, 1	; 11

	if (!(PINC & (1 << PINC2)))
  bc:	32 99       	sbic	0x06, 2	; 6
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__vector_4+0x26>
	{
		PORTD |= (1 << PORTD2);
  c0:	5a 9a       	sbi	0x0b, 2	; 11
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <__vector_4+0x28>
	}
	else PORTD &= ~(1 << PORTD2);
  c4:	5a 98       	cbi	0x0b, 2	; 11
	
	if (!(PINC & (1 << PINC3)))
  c6:	33 99       	sbic	0x06, 3	; 6
  c8:	02 c0       	rjmp	.+4      	; 0xce <__vector_4+0x30>
	{
		PORTD |= (1 << PORTD3);
  ca:	5b 9a       	sbi	0x0b, 3	; 11
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <__vector_4+0x32>
	}
	else PORTD &= ~(1 << PORTD3);
  ce:	5b 98       	cbi	0x0b, 3	; 11
}
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <main>:
int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  de:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xF0;
  e0:	90 ef       	ldi	r25, 0xF0	; 240
  e2:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xFF;
  e4:	88 b9       	out	0x08, r24	; 8
	pcint_init();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <pcint_init>
    while (1) 
    {
    }
  ea:	ff cf       	rjmp	.-2      	; 0xea <main+0x10>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
