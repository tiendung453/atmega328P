
leg7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075d  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000242  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000352  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_init>:
#define MOSI 3
#define SCK 5
#define SS 2
void spi_init(void)
{
	DDRB = (1 << MOSI)|(1 << SCK)|(1 << SS);
  80:	8c e2       	ldi	r24, 0x2C	; 44
  82:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE)|(1 << MSTR);
  84:	80 e5       	ldi	r24, 0x50	; 80
  86:	8c bd       	out	0x2c, r24	; 44
  88:	08 95       	ret

0000008a <spi_send_data>:
}
void spi_send_data(unsigned char cmd, unsigned char data)
{
	PORTB &= ~(1 << SS);
  8a:	2a 98       	cbi	0x05, 2	; 5
	SPDR = cmd; // g?i l?nh cmd 
  8c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // ??i khi truy?n xong 
  8e:	0d b4       	in	r0, 0x2d	; 45
  90:	07 fe       	sbrs	r0, 7
  92:	fd cf       	rjmp	.-6      	; 0x8e <spi_send_data+0x4>
	SPDR = data; // send data
  94:	6e bd       	out	0x2e, r22	; 46
	while (!(SPSR & (1 << SPIF)));
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <spi_send_data+0xc>
	PORTB |= (1 << SS);
  9c:	2a 9a       	sbi	0x05, 2	; 5
  9e:	08 95       	ret

000000a0 <main>:
}

int main(void)
{
	spi_init();
  a0:	0e 94 40 00 	call	0x80	; 0x80 <spi_init>
	spi_send_data(0x09,0xFF);
  a4:	6f ef       	ldi	r22, 0xFF	; 255
  a6:	89 e0       	ldi	r24, 0x09	; 9
  a8:	0e 94 45 00 	call	0x8a	; 0x8a <spi_send_data>
	spi_send_data(0x0B, 0x01);
  ac:	61 e0       	ldi	r22, 0x01	; 1
  ae:	8b e0       	ldi	r24, 0x0B	; 11
  b0:	0e 94 45 00 	call	0x8a	; 0x8a <spi_send_data>
	spi_send_data(0x0C, 0x01);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	8c e0       	ldi	r24, 0x0C	; 12
  b8:	0e 94 45 00 	call	0x8a	; 0x8a <spi_send_data>
	spi_send_data(0x0A, 0x09);
  bc:	69 e0       	ldi	r22, 0x09	; 9
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	0e 94 45 00 	call	0x8a	; 0x8a <spi_send_data>
	spi_send_data(0x01, 5);
  c4:	65 e0       	ldi	r22, 0x05	; 5
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 45 00 	call	0x8a	; 0x8a <spi_send_data>
	spi_send_data(0x02, 6);
  cc:	66 e0       	ldi	r22, 0x06	; 6
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	0e 94 45 00 	call	0x8a	; 0x8a <spi_send_data>
    while (1) 
    {
	}
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x34>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
