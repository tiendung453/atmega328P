
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000825  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000717  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000118  00000000  00000000  0000182b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_slave_init>:
}

void i2c_showError(unsigned char er)
{
	DDRB = 0xFF;
	PORTB = er;
  80:	94 e0       	ldi	r25, 0x04	; 4
  82:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  86:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  8a:	84 ec       	ldi	r24, 0xC4	; 196
  8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  90:	08 95       	ret

00000092 <i2c_received>:
  92:	81 11       	cpse	r24, r1
  94:	04 c0       	rjmp	.+8      	; 0x9e <i2c_received+0xc>
  96:	84 ec       	ldi	r24, 0xC4	; 196
  98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <i2c_received+0x12>
  9e:	84 e8       	ldi	r24, 0x84	; 132
  a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  a4:	ec eb       	ldi	r30, 0xBC	; 188
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 23       	and	r24, r24
  ac:	ec f7       	brge	.-6      	; 0xa8 <i2c_received+0x16>
  ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  b2:	08 95       	ret

000000b4 <i2c_slave_listen>:
  b4:	ec eb       	ldi	r30, 0xBC	; 188
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 23       	and	r24, r24
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_slave_listen+0x4>
  be:	08 95       	ret

000000c0 <main>:
}


int main(void)
{
	DDRB = 0xFF;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 b9       	out	0x04, r24	; 4
    i2c_slave_init(0b00000010);
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 40 00 	call	0x80	; 0x80 <i2c_slave_init>
	i2c_slave_listen();
  ca:	0e 94 5a 00 	call	0xb4	; 0xb4 <i2c_slave_listen>
}

unsigned char i2c_read_status(void)
{
	unsigned char i = 0;
	i = TWSR & 0xF8;
  ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  d2:	88 7f       	andi	r24, 0xF8	; 248
    i2c_slave_init(0b00000010);
	i2c_slave_listen();
	
	unsigned char s,i;
	s = i2c_read_status();
	if(s != 0x60)
  d4:	80 36       	cpi	r24, 0x60	; 96
  d6:	21 f0       	breq	.+8      	; 0xe0 <main+0x20>
	while((TWCR & (1 << TWINT)) == 0);
}

void i2c_showError(unsigned char er)
{
	DDRB = 0xFF;
  d8:	9f ef       	ldi	r25, 0xFF	; 255
  da:	94 b9       	out	0x04, r25	; 4
	PORTB = er;
  dc:	85 b9       	out	0x05, r24	; 5
  de:	0e c0       	rjmp	.+28     	; 0xfc <main+0x3c>
	if(s != 0x60)
	{
		i2c_showError(s);
		return 0;
	}
	i = i2c_received(0);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 49 00 	call	0x92	; 0x92 <i2c_received>
}

unsigned char i2c_read_status(void)
{
	unsigned char i = 0;
	i = TWSR & 0xF8;
  e6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ea:	98 7f       	andi	r25, 0xF8	; 248
		i2c_showError(s);
		return 0;
	}
	i = i2c_received(0);
	s = i2c_read_status();
	if(s != 0x80)
  ec:	90 38       	cpi	r25, 0x80	; 128
  ee:	21 f0       	breq	.+8      	; 0xf8 <main+0x38>
	while((TWCR & (1 << TWINT)) == 0);
}

void i2c_showError(unsigned char er)
{
	DDRB = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 b9       	out	0x04, r24	; 4
	PORTB = er;
  f4:	95 b9       	out	0x05, r25	; 5
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x3c>
	{
		i2c_showError(s);
		return 0;
	}

	PORTB = i;
  f8:	85 b9       	out	0x05, r24	; 5
    while (1);
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x3a>
	return 0;
}
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 95       	ret

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
