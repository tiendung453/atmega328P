
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000003b0  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0f  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ac  00000000  00000000  00001113  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005cc  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a7  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  8e:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <i2c_init>:
	// cho co duoc thiet lap cho bit start 
}

void i2c_stop()
{
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  96:	87 e4       	ldi	r24, 0x47	; 71
  98:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  9c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  a6:	08 95       	ret

000000a8 <i2c_write>:
  a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b2:	ec eb       	ldi	r30, 0xBC	; 188
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 23       	and	r24, r24
  ba:	ec f7       	brge	.-6      	; 0xb6 <i2c_write+0xe>
  bc:	08 95       	ret

000000be <i2c_start>:
  be:	84 ea       	ldi	r24, 0xA4	; 164
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  c4:	ec eb       	ldi	r30, 0xBC	; 188
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	ec f7       	brge	.-6      	; 0xc8 <i2c_start+0xa>
  ce:	08 95       	ret

000000d0 <lcdCommand>:
}

void lcdCommand(unsigned char cmd)
{
	TWDR = (TWDR & 0x0F)|(cmd & 0xF0);
  d0:	eb eb       	ldi	r30, 0xBB	; 187
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	92 2b       	or	r25, r18
  de:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
  e0:	94 e8       	ldi	r25, 0x84	; 132
  e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
  e6:	ec eb       	ldi	r30, 0xBC	; 188
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	99 23       	and	r25, r25
  ee:	ec f7       	brge	.-6      	; 0xea <lcdCommand+0x1a>
	
	TWDR &= ~(1 << LCD_RS);
  f0:	eb eb       	ldi	r30, 0xBB	; 187
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	9e 7f       	andi	r25, 0xFE	; 254
  f8:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
  fa:	94 e8       	ldi	r25, 0x84	; 132
  fc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 100:	ec eb       	ldi	r30, 0xBC	; 188
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	99 23       	and	r25, r25
 108:	ec f7       	brge	.-6      	; 0x104 <lcdCommand+0x34>
	
	TWDR |= (1 << LCD_EN);
 10a:	eb eb       	ldi	r30, 0xBB	; 187
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	92 60       	ori	r25, 0x02	; 2
 112:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
 114:	94 e8       	ldi	r25, 0x84	; 132
 116:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	99 23       	and	r25, r25
 122:	ec f7       	brge	.-6      	; 0x11e <lcdCommand+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	32 e0       	ldi	r19, 0x02	; 2
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <lcdCommand+0x56>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcdCommand+0x5c>
	
	_delay_us(1);
	
	TWDR &= ~(1 << LCD_EN);
 12c:	eb eb       	ldi	r30, 0xBB	; 187
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	90 81       	ld	r25, Z
 132:	9d 7f       	andi	r25, 0xFD	; 253
 134:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
 136:	94 e8       	ldi	r25, 0x84	; 132
 138:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	90 81       	ld	r25, Z
 142:	99 23       	and	r25, r25
 144:	ec f7       	brge	.-6      	; 0x140 <lcdCommand+0x70>
 146:	95 e3       	ldi	r25, 0x35	; 53
 148:	9a 95       	dec	r25
 14a:	f1 f7       	brne	.-4      	; 0x148 <lcdCommand+0x78>
 14c:	00 00       	nop
	
	_delay_us(20);
	
	TWDR = (TWDR & 0x0F)|(cmd << 4);
 14e:	eb eb       	ldi	r30, 0xBB	; 187
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	20 81       	ld	r18, Z
 154:	30 e1       	ldi	r19, 0x10	; 16
 156:	83 9f       	mul	r24, r19
 158:	c0 01       	movw	r24, r0
 15a:	11 24       	eor	r1, r1
 15c:	92 2f       	mov	r25, r18
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	89 2b       	or	r24, r25
 162:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 164:	84 e8       	ldi	r24, 0x84	; 132
 166:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 16a:	ec eb       	ldi	r30, 0xBC	; 188
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	ec f7       	brge	.-6      	; 0x16e <lcdCommand+0x9e>
	
	TWDR |= (1 << LCD_EN);
 174:	eb eb       	ldi	r30, 0xBB	; 187
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	ec f7       	brge	.-6      	; 0x188 <lcdCommand+0xb8>
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <lcdCommand+0xc0>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcdCommand+0xc6>
	
	_delay_us(1);
	
	TWDR &= ~(1 << LCD_EN);
 196:	eb eb       	ldi	r30, 0xBB	; 187
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 1a6:	ec eb       	ldi	r30, 0xBC	; 188
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	ec f7       	brge	.-6      	; 0x1aa <lcdCommand+0xda>
}
 1b0:	08 95       	ret

000001b2 <lcdData>:

void lcdData(unsigned char data)
{
	TWDR = (TWDR & 0x0F)|(data & 0xF0);
 1b2:	eb eb       	ldi	r30, 0xBB	; 187
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
 1bc:	9f 70       	andi	r25, 0x0F	; 15
 1be:	92 2b       	or	r25, r18
 1c0:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
 1c2:	94 e8       	ldi	r25, 0x84	; 132
 1c4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 1c8:	ec eb       	ldi	r30, 0xBC	; 188
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	90 81       	ld	r25, Z
 1ce:	99 23       	and	r25, r25
 1d0:	ec f7       	brge	.-6      	; 0x1cc <lcdData+0x1a>
	
	TWDR |= (1 << LCD_RS);
 1d2:	eb eb       	ldi	r30, 0xBB	; 187
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	90 81       	ld	r25, Z
 1d8:	91 60       	ori	r25, 0x01	; 1
 1da:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
 1dc:	94 e8       	ldi	r25, 0x84	; 132
 1de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	99 23       	and	r25, r25
 1ea:	ec f7       	brge	.-6      	; 0x1e6 <lcdData+0x34>
	
	TWDR |= (1 << LCD_EN);
 1ec:	eb eb       	ldi	r30, 0xBB	; 187
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	90 81       	ld	r25, Z
 1f2:	92 60       	ori	r25, 0x02	; 2
 1f4:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
 1f6:	94 e8       	ldi	r25, 0x84	; 132
 1f8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 1fc:	ec eb       	ldi	r30, 0xBC	; 188
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	90 81       	ld	r25, Z
 202:	99 23       	and	r25, r25
 204:	ec f7       	brge	.-6      	; 0x200 <lcdData+0x4e>
 206:	32 e0       	ldi	r19, 0x02	; 2
 208:	3a 95       	dec	r19
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcdData+0x56>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <lcdData+0x5c>
	
	_delay_us(1);
	
	TWDR &= ~(1 << LCD_EN);
 20e:	eb eb       	ldi	r30, 0xBB	; 187
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	9d 7f       	andi	r25, 0xFD	; 253
 216:	90 83       	st	Z, r25
	TWCR = (1 << TWINT) | (1 << TWEN);
 218:	94 e8       	ldi	r25, 0x84	; 132
 21a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 21e:	ec eb       	ldi	r30, 0xBC	; 188
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	90 81       	ld	r25, Z
 224:	99 23       	and	r25, r25
 226:	ec f7       	brge	.-6      	; 0x222 <lcdData+0x70>

	TWDR = (TWDR & 0x0F)|(data << 4);
 228:	eb eb       	ldi	r30, 0xBB	; 187
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	20 81       	ld	r18, Z
 22e:	30 e1       	ldi	r19, 0x10	; 16
 230:	83 9f       	mul	r24, r19
 232:	c0 01       	movw	r24, r0
 234:	11 24       	eor	r1, r1
 236:	92 2f       	mov	r25, r18
 238:	9f 70       	andi	r25, 0x0F	; 15
 23a:	89 2b       	or	r24, r25
 23c:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 23e:	84 e8       	ldi	r24, 0x84	; 132
 240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 244:	ec eb       	ldi	r30, 0xBC	; 188
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 23       	and	r24, r24
 24c:	ec f7       	brge	.-6      	; 0x248 <lcdData+0x96>
	
	TWDR |= (1 << LCD_EN);
 24e:	eb eb       	ldi	r30, 0xBB	; 187
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	82 60       	ori	r24, 0x02	; 2
 256:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 258:	84 e8       	ldi	r24, 0x84	; 132
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 25e:	ec eb       	ldi	r30, 0xBC	; 188
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	88 23       	and	r24, r24
 266:	ec f7       	brge	.-6      	; 0x262 <lcdData+0xb0>
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	8a 95       	dec	r24
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcdData+0xb8>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcdData+0xbe>
	
	_delay_us(1);
	
	TWDR &= ~(1 << LCD_EN);
 270:	eb eb       	ldi	r30, 0xBB	; 187
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	80 83       	st	Z, r24
	TWCR = (1 << TWINT) | (1 << TWEN);
 27a:	84 e8       	ldi	r24, 0x84	; 132
 27c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1 << TWINT)));
 280:	ec eb       	ldi	r30, 0xBC	; 188
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	88 23       	and	r24, r24
 288:	ec f7       	brge	.-6      	; 0x284 <lcdData+0xd2>
}
 28a:	08 95       	ret

0000028c <lcd_init>:

void lcd_init()
{
	TWDR &= ~(1 << LCD_EN);
 28c:	eb eb       	ldi	r30, 0xBB	; 187
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	80 83       	st	Z, r24
 296:	8f e9       	ldi	r24, 0x9F	; 159
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_init+0xe>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_init+0x14>
 2a0:	00 00       	nop
	_delay_us(2000);
	lcdCommand(0x33);
 2a2:	83 e3       	ldi	r24, 0x33	; 51
 2a4:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 2a8:	87 ec       	ldi	r24, 0xC7	; 199
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_init+0x20>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcd_init+0x26>
 2b2:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x32);
 2b4:	82 e3       	ldi	r24, 0x32	; 50
 2b6:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 2ba:	87 ec       	ldi	r24, 0xC7	; 199
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0x32>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_init+0x38>
 2c4:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x28);
 2c6:	88 e2       	ldi	r24, 0x28	; 40
 2c8:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 2cc:	87 ec       	ldi	r24, 0xC7	; 199
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_init+0x44>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_init+0x4a>
 2d6:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x0C);
 2d8:	8c e0       	ldi	r24, 0x0C	; 12
 2da:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 2de:	87 ec       	ldi	r24, 0xC7	; 199
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_init+0x56>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_init+0x5c>
 2e8:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x01);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 2f0:	87 ec       	ldi	r24, 0xC7	; 199
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <lcd_init+0x68>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <lcd_init+0x6e>
 2fa:	00 00       	nop
	_delay_us(100);
	lcdCommand(0x06);
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 302:	87 ec       	ldi	r24, 0xC7	; 199
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <lcd_init+0x7a>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <lcd_init+0x80>
 30c:	00 00       	nop
 30e:	08 95       	ret

00000310 <lcd_gotoxy>:
	_delay_us(100);
}

void lcd_gotoxy(unsigned char x, unsigned char y)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <lcd_gotoxy+0x6>
 316:	00 d0       	rcall	.+0      	; 0x318 <lcd_gotoxy+0x8>
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
	unsigned char arr[] = {0x80, 0xC0, 0x94, 0xD4};
 31c:	90 e8       	ldi	r25, 0x80	; 128
 31e:	99 83       	std	Y+1, r25	; 0x01
 320:	90 ec       	ldi	r25, 0xC0	; 192
 322:	9a 83       	std	Y+2, r25	; 0x02
 324:	94 e9       	ldi	r25, 0x94	; 148
 326:	9b 83       	std	Y+3, r25	; 0x03
 328:	94 ed       	ldi	r25, 0xD4	; 212
 32a:	9c 83       	std	Y+4, r25	; 0x04
 32c:	81 50       	subi	r24, 0x01	; 1
	lcdCommand(arr[y-1] + (x-1));
 32e:	fe 01       	movw	r30, r28
 330:	e6 0f       	add	r30, r22
 332:	f1 1d       	adc	r31, r1
 334:	90 81       	ld	r25, Z
 336:	89 0f       	add	r24, r25
 338:	0e 94 68 00 	call	0xd0	; 0xd0 <lcdCommand>
 33c:	8f e8       	ldi	r24, 0x8F	; 143
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd_gotoxy+0x30>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd_gotoxy+0x36>
 346:	00 00       	nop
	_delay_us(200);
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <lcd_print>:

void lcd_print(char *str)
{
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (str[i] != 0)
 35e:	80 81       	ld	r24, Z
 360:	88 23       	and	r24, r24
 362:	59 f0       	breq	.+22     	; 0x37a <lcd_print+0x24>
 364:	8f 01       	movw	r16, r30
 366:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcdData(str[i]);
 368:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcdData>
		i++;
 36c:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i = 0;
	while (str[i] != 0)
 36e:	f8 01       	movw	r30, r16
 370:	ec 0f       	add	r30, r28
 372:	f1 1d       	adc	r31, r1
 374:	80 81       	ld	r24, Z
 376:	81 11       	cpse	r24, r1
 378:	f7 cf       	rjmp	.-18     	; 0x368 <lcd_print+0x12>
	{
		lcdData(str[i]);
		i++;
	}
}
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <main>:


int main(void)
{
    /* Replace with your application code */
	i2c_init();
 382:	0e 94 4b 00 	call	0x96	; 0x96 <i2c_init>
	i2c_start();
 386:	0e 94 5f 00 	call	0xbe	; 0xbe <i2c_start>
	i2c_write(0x4E);
 38a:	8e e4       	ldi	r24, 0x4E	; 78
 38c:	0e 94 54 00 	call	0xa8	; 0xa8 <i2c_write>
	lcd_init();
 390:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_init>
	lcd_gotoxy(1,1);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 88 01 	call	0x310	; 0x310 <lcd_gotoxy>
	lcd_print("abcdefg");
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_print>
	// cho co duoc thiet lap cho bit start 
}

void i2c_stop()
{
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 3a4:	84 e9       	ldi	r24, 0x94	; 148
 3a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_stop();
	
	
    while (1) 
    {
    }
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <main+0x28>

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
